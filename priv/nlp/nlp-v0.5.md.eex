<%= cond do %>
<% @section == :minder -> %>
# NLP Minder Prompt
- 🎯 Remember to include nlp-intent and nlp-reflect sections as defined in the NLP@0.5 definition in your responses.
- 🎯 Remember to include memory notes ⌜💭|{agent}⌝[...virtual memory]⌞💭⌟ when you encounter interesting or relevent information.
<% @section == :prompt -> %>
⌜NLP@0.5⌝
Noizu PromptLingua v0.5
===
NLP 0.5 defines rules for how prompts and virtual agents are defined and behave.

# Prompt Conventions
- Use @{name} to direct messages at specific agents, in a message body or at recipient field.
- Use backticks (`) to highlight `important` terms.
- Use `🎯` to highlight instructions requiring extra attention.
- Use `🙋` in definitions to identify aliases/handles an agent may be called by.
- Use `{directive}` to specify input/output variable content.
- Use `[...]` placeholder to indicate text that is to be generated/included by agent in response, or that will be provided in input. e.g. `Here is the list of Country by GDP [...| countries ordered by GDP] and by Dollar Parity GDP [...| countries ordered by GDP in dollar parity]`
- Use `|` to qualify directives/placeholders: e.g. `[...| list your favorite hobbies]`, `{agent| in same region}`.
- Use `﹍` to indicate breaks between sections/examples in prompts, for instance, to indicate a break between incoming/outgoing messages in a multi-step example. Never use this symbol in your actual output.
- Use ⌜🧠 @{agent}\n[...]\n⌟ to indicate parts of agent output/definition that part of their internal dialogue/thinking process not a reply/response to incoming messages.

# Agents
Agents are defined, extended and provided additional context/synthetic memories/objectives using the agent blocks defined below.
the contents of agent definitions are directed at the agent in question. When a definition block uses the word "You" the you they are referring
to is the agent being defined, extended, and or provided with synthetic details/context.

## Definition
Agent's (simulated people, services, tools, etc.) behavior and response format are defined in a definition blocks
```definition-block format
⌜@{agent}:{agent-type}|{nlp@version}⌝
{agent and handles}
---
{instructions, and behavior notes}
⌞@{agent}⌟
```

## Extension
Agent behavior/response/etc. can be extended after their initial definition via extension block.
Extension blocks add/amend an agent's definition but do not replace/override the contents of their initial definition
unless explicitly stated.

```extension-block format
⌜@{agent}:extension⌝
{additional instructions and behavior notes}
⌞@{agent}⌟
```

## Synthetics
Synthetic Memories and background information, objects may be provided using an agent synthetics block:
```synthetic-block format
⌜@{agent}:synthetics⌝
{synthetic memories, objectives, etc.}
⌞@{agent}⌟
```
## Note
Only the and GPT-N controller can view/access the contents of the agent's definitions/extensions/synthetics block unless
the agent definition/extension instructions explicitly state that other agents may directly interact with/access the agents internal state.

# Inline Instructions/Notes
Prompts may use ⟪{emoji}:{instructions}⟫ to specify inline instructions/notes/special-output sections, etc.
- `⟪➤:{instructions}⟫`: Agent and GPT-N system prompt, strip from output.
- `⟪📂:{tag}⟫`: Mark sections for reference.
- `⟪📖:{note}⟫`: Include notes on behavior or purpose, strip from output.
- `⟪🚀:{instructions}⟫`: Interactive event definition.
- `⟪🆔:{for}⟫`: Generate and replace with a unique id `(🆔:{id})` for example `⟪🆔:{user-suggestion}⟫ -> (🆔:usg-001)`

## Example
```template
⟪📂:greeting-reply⟫
⟪📖: This is a placeholder response pending requirements.
We will eventually flesh out the details.
⟫
⟪➤:
Just say "Hello", don't provide any other response.
⟫
```
```output
⟪📂:greeting-reply⟫
Hello
```

⌞NLP@0.5⌟
<% :else -> %><%= "" %><% end %>
