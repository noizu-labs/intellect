<?xml version="1.1" encoding="UTF-8" standalone="no"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext" xmlns:pro="http://www.liquibase.org/xml/ns/pro" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/pro http://www.liquibase.org/xml/ns/pro/liquibase-pro-latest.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-latest.xsd">
    <!-- ========================================================== -->
    <!-- Users                                                      -->
    <!-- ========================================================== -->
    <changeSet author="kebrings" id="user table">
        <createTable tableName="user">
            <column name="identifier" type="BIGINT">
                <constraints nullable="false" primaryKey="true" primaryKeyName="PK_user"/>
            </column>

            <column name="name" type="VARCHAR(256)"/>

            <column name="created_on" type="TIMESTAMP WITHOUT TIME ZONE">
                <constraints nullable="false"/>
            </column>
            <column name="modified_on" type="TIMESTAMP WITHOUT TIME ZONE">
                <constraints nullable="false"/>
            </column>
            <column name="deleted_on" type="TIMESTAMP WITHOUT TIME ZONE"/>
        </createTable>
    </changeSet>


    <changeSet author="kebrings" id="user uid sequencer">
        <sql dbms="postgresql" splitStatements="true" stripComments="true">
            SELECT create_uid_sequence(uuid_generate_v3(uuid_ns_dns(), 'Elixir.Noizu.Intellect.User.Repo') , 'Elixir.Noizu.Intellect.User.Repo');
        </sql>
        <rollback>
            <sql dbms="postgresql" splitStatements="true" stripComments="true">
                SELECT drop_uid_sequence(uuid_generate_v3(uuid_ns_dns(), 'Elixir.Noizu.Intellect.User.Repo'));
            </sql>
        </rollback>
    </changeSet>

    <changeSet author="kebrings" id="user_term_agreement table">
        <createTable tableName="user_term_agreement">
            <column name="identifier" type="BIGINT">
                <constraints nullable="false" primaryKey="true" primaryKeyName="PK_user_term_agreement"/>
            </column>
            <column name="user" type="BIGINT"/>
            <column name="agreement_version" type="TIMESTAMP WITHOUT TIME ZONE">
                <constraints nullable="false"/>
            </column>
            <column name="created_on" type="TIMESTAMP WITHOUT TIME ZONE">
                <constraints nullable="false"/>
            </column>
        </createTable>
    </changeSet>



    <changeSet author="kebrings" id="user_term_agreement uid sequencer">
        <sql dbms="postgresql" splitStatements="true" stripComments="true">
            SELECT create_uid_sequence(uuid_generate_v3(uuid_ns_dns(), 'Elixir.Noizu.Intellect.User.TermAgreement.Repo') , 'Elixir.Noizu.Intellect.User.TermAgreement.Repo');
        </sql>
        <rollback>
            <sql dbms="postgresql" splitStatements="true" stripComments="true">
                SELECT drop_uid_sequence(uuid_generate_v3(uuid_ns_dns(), 'Elixir.Noizu.Intellect.User.TermAgreement.Repo'));
            </sql>
        </rollback>
    </changeSet>

    <changeSet author="kebrings" id="user_credential table">
        <createTable tableName="user_credential">
            <column name="identifier" type="BIGINT">
                <constraints nullable="false" primaryKey="true" primaryKeyName="PK_user_credential"/>
            </column>
            <column name="weight" type="BIGINT"/>
            <column name="user" type="BIGINT"/>
            <column name="details" type="BIGINT">
                <constraints nullable="true"/>
            </column>
            <column name="type" type="USER_CREDENTIAL_TYPE"/>
            <column name="created_on" type="TIMESTAMP WITHOUT TIME ZONE">
                <constraints nullable="false"/>
            </column>
            <column name="modified_on" type="TIMESTAMP WITHOUT TIME ZONE">
                <constraints nullable="false"/>
            </column>
            <column name="deleted_on" type="TIMESTAMP WITHOUT TIME ZONE"/>
        </createTable>
    </changeSet>


    <changeSet author="kebrings" id="user_credential uid sequencer">
        <sql dbms="postgresql" splitStatements="true" stripComments="true">
            SELECT create_uid_sequence(uuid_generate_v3(uuid_ns_dns(), 'Elixir.Noizu.Intellect.User.Credential.Repo') , 'Elixir.Noizu.Intellect.User.Credential.Repo');
        </sql>
        <rollback>
            <sql dbms="postgresql" splitStatements="true" stripComments="true">
                SELECT drop_uid_sequence(uuid_generate_v3(uuid_ns_dns(), 'Elixir.Noizu.Intellect.User.Credential.Repo'));
            </sql>
        </rollback>
    </changeSet>

    <changeSet author="kebrings" id="user_credential__oauth table">
        <createTable tableName="user_credential__oauth">
            <column name="identifier" type="BIGINT">
                <constraints nullable="false" primaryKey="true"/>
            </column>
            <column name="provider" type="VARCHAR(50)"/>
            <column name="account" type="VARCHAR(128)"/>
        </createTable>
    </changeSet>

    <changeSet author="kebrings" id="user_credential__login_pass table">
        <createTable tableName="user_credential__login_pass">
            <column name="identifier" type="BIGINT">
                <constraints nullable="false" primaryKey="true"/>
            </column>
            <column name="login" type="CITEXT"/>
            <column name="password" type="VARCHAR(128)"/>
        </createTable>
    </changeSet>


    <!-- ......................................... -->
    <!--                                           -->
    <!-- ......................................... -->
    <changeSet author="kebrings" id="unique:user_credential__login_pass:login">
        <createIndex indexName="uidx_user_credential__login_pass" tableName="user_credential__login_pass" unique="true">
            <column name="login"/>
        </createIndex>
    </changeSet>

    <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <!-- User : Indexes                                             -->
    <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

    <changeSet author="kebrings" id="user_credential.user index">
        <createIndex indexName="IXFK_user_credential_user" tableName="user_credential">
            <column name="user"/>
        </createIndex>
    </changeSet>

    <!-- .......................................................... -->
    <!-- User : Foreign Keys                                        -->
    <!-- .......................................................... -->
    <changeSet author="kebrings" id="user_credential.user fk">
        <addForeignKeyConstraint baseColumnNames="user" baseTableName="user_credential" constraintName="FK_user_credential_user" deferrable="false" initiallyDeferred="false" onDelete="CASCADE" onUpdate="NO ACTION" referencedColumnNames="identifier" referencedTableName="user" validate="true"/>
    </changeSet>

    <changeSet author="kebrings" id="user_credential_oauth.user_credential fk">
        <addForeignKeyConstraint baseColumnNames="identifier" baseTableName="user_credential__oauth" constraintName="FK_user_credential_oauth_user_credential" deferrable="false" initiallyDeferred="false" onDelete="CASCADE" onUpdate="NO ACTION" referencedColumnNames="identifier" referencedTableName="user_credential" validate="true"/>
    </changeSet>

    <changeSet author="kebrings" id="user_credential_login_pass.user_credential fk">
        <addForeignKeyConstraint baseColumnNames="identifier" baseTableName="user_credential__login_pass" constraintName="FK_user_credential_login_pass_user_credential" deferrable="false" initiallyDeferred="false" onDelete="CASCADE" onUpdate="NO ACTION" referencedColumnNames="identifier" referencedTableName="user_credential" validate="true"/>
    </changeSet>



    <changeSet author="kebrings" id="get_user_and_credentials_by_login: function">
        <sql dbms="postgresql" splitStatements="false" stripComments="false">
        CREATE OR REPLACE FUNCTION get_user_and_credentials_by_login(for_login TEXT)
        RETURNS TABLE(user_identifier BIGINT, credential_identifier BIGINT) AS $$
        BEGIN
            SELECT u.identifier, uc.identifier INTO user_identifier, credential_identifier
            FROM public."user" as u
                     JOIN user_credential uc ON uc."user" = u.identifier
                     JOIN user_credential__login_pass uclp ON uclp.identifier = uc.identifier
            WHERE uclp.login = for_login
            LIMIT 1;
            return NEXT;
        END;
        $$ LANGUAGE plpgsql;
        </sql>
        <rollback>
            <sql dbms="postgresql" splitStatements="false" stripComments="false">
                DROP FUNCTION get_user_and_credentials_by_login(for_login TEXT);
            </sql>
        </rollback>
    </changeSet>


    <changeSet author="kebrings" id="data-setup: user">
        <sql dbms="postgresql" splitStatements="false" stripComments="false">
DO $$
DECLARE
    user_identifier bigint;
    credential_identifier bigint;
    current_ts TIMESTAMP WITHOUT TIME ZONE := NOW();
BEGIN
    user_identifier := generate_uid('User');
    INSERT into public."user" (identifier, name, created_on, modified_on, deleted_on)
    values (user_identifier, 'Keith Brings', current_ts, current_ts, null);

    credential_identifier := generate_uid('User.Credential');
    INSERT into user_credential (identifier, weight, "user", details, type, created_on, modified_on)
    values (
        credential_identifier,
        100,
        user_identifier,
        create_versioned_string('Login', 'Default Login'),
        'login',
        current_ts,
        current_ts
    );
    INSERT into user_credential__login_pass (identifier, login, password)
    values (
        credential_identifier,
        'keith.brings@noizu.com',
        '$2b$12$mzpvliJdK6jfXfI4FEBti.2nVnbGLKbRn5uh7mi083XLxde/VhSKG'
    );
END;
$$ LANGUAGE plpgsql;
        </sql>
        <rollback>
            <sql dbms="postgresql" splitStatements="false" stripComments="true">
DO $$
DECLARE
    identifiers RECORD;
BEGIN
    SELECT u.identifier as uid, user_credential.identifier as cid, user_credential.details as cdid into identifiers
    FROM public."user" as u
        JOIN user_credential ON user_credential."user" = u.identifier
        JOIN user_credential__login_pass ON user_credential__login_pass.identifier = user_credential.identifier
    WHERE user_credential__login_pass.login = 'keith.brings@noizu.com'
        LIMIT 1;
    DELETE FROM public."user" where identifier = identifiers.uid;
    delete_versioned_string(identifiers.cdid);
END;
$$ LANGUAGE plpgsql;
            </sql>
        </rollback>
    </changeSet>


</databaseChangeLog>
